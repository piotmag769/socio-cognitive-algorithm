WEIGHTS = [
    11,
    18,
    8,
    12,
    19,
    9,
    16,
    14,
    6,
    12,
    5,
    17,
    15,
    9,
    9,
    13,
    20,
    16,
    5,
    17,
    7,
    16,
    5,
    20,
    14,
    19,
    10,
    17,
    11,
    18,
    14,
    12,
    13,
    10,
    8,
    12,
    18,
    15,
    19,
    6,
    5,
    20,
    13,
    18,
    11,
    14,
    15,
    9,
    7,
    15,
    14,
    17,
    16,
    17,
    7,
    13,
    8,
    16,
    10,
    7,
    9,
    7,
    9,
    20,
    13,
    18,
    6,
    15,
    19,
    6,
    11,
    15,
    19,
    10,
    13,
    14,
    15,
    9,
    17,
    11,
    13,
    17,
    17,
    11,
    9,
    7,
    15,
    18,
    11,
    5,
    7,
    5,
    19,
    19,
    12,
    20,
    10,
    12,
    10,
    7,
]
PROFITS = [
    20,
    14,
    9,
    8,
    12,
    11,
    8,
    19,
    12,
    6,
    10,
    17,
    19,
    6,
    18,
    10,
    5,
    11,
    14,
    18,
    11,
    14,
    20,
    18,
    14,
    7,
    5,
    8,
    9,
    17,
    7,
    18,
    9,
    6,
    14,
    16,
    14,
    16,
    16,
    5,
    19,
    11,
    14,
    6,
    14,
    15,
    14,
    9,
    7,
    9,
    11,
    17,
    13,
    6,
    15,
    14,
    8,
    8,
    18,
    18,
    16,
    13,
    7,
    16,
    19,
    11,
    14,
    11,
    15,
    11,
    15,
    20,
    9,
    8,
    11,
    12,
    10,
    13,
    14,
    7,
    9,
    7,
    17,
    19,
    7,
    6,
    16,
    13,
    15,
    16,
    6,
    10,
    13,
    11,
    12,
    9,
    17,
    10,
    6,
    14,
]


def knapSack(W, wt, val, n):

    # Making the dp array
    dp = [0 for _ in range(W + 1)]

    # Taking first i elements
    for i in range(1, n + 1):

        # Starting from back,
        # so that we also have data of
        # previous computation when taking i-1 items
        for w in range(W, 0, -1):
            if wt[i - 1] <= w:

                # Finding the maximum value
                dp[w] = max(dp[w], dp[w - wt[i - 1]] + val[i - 1])

    # Returning the maximum value of knapsack
    return dp[W]


if __name__ == "__main__":
    print(knapSack(1000, WEIGHTS, PROFITS, 100))
